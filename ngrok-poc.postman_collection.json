{
	"info": {
		"_postman_id": "1313db4f-dbfd-414c-81e6-81e1baac3c07",
		"name": "ngrok-poc",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PasswordAuth - Valid request Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							"pm.environment.set(\"tokenId\", jsonData.tokenId);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(jsonData).to.haveOwnProperty(\"tokenId\");\r",
							"    pm.expect(jsonData).to.haveOwnProperty(\"token\");\r",
							"    pm.expect(jsonData).to.haveOwnProperty(\"email\");\r",
							"    pm.expect(jsonData).to.haveOwnProperty(\"role\");\r",
							"    pm.expect(jsonData.role).to.haveOwnProperty(\"id\");\r",
							"    pm.expect(jsonData.role).to.haveOwnProperty(\"name\");\r",
							"    pm.expect(jsonData.role).to.haveOwnProperty(\"permissions\");\r",
							"    pm.expect(jsonData.role.permissions).to.haveOwnProperty(\"Providers\");\r",
							"    pm.expect(jsonData.role.permissions).to.haveOwnProperty(\"Integrations\");\r",
							"    pm.expect(jsonData.role.permissions).to.haveOwnProperty(\"Organization\");\r",
							"});\r",
							"\r",
							"pm.test(\"Property values\", function () {\r",
							"    pm.expect(jsonData.email).to.be.eql(pm.environment.get(\"email\"));\r",
							"    pm.expect(jsonData.role.name).to.be.eql(\"admin\");\r",
							"    pm.expect(jsonData.role.permissions.Providers).to.be.eql(\"Write\");\r",
							"    pm.expect(jsonData.role.permissions.Integrations).to.be.eql(\"Write\");\r",
							"    pm.expect(jsonData.role.permissions.Organization).to.be.eql(\"Write\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/token/password",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"token",
						"password"
					]
				},
				"description": "Endpoint for authentication using an email and password for a user already registered at Verifiable. In return you will receive an access token that can be used in following API calls.\n"
			},
			"response": [
				{
					"name": "Unauthorized",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/token/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"token",
								"password"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Forbidden",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/token/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"token",
								"password"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Success",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/token/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"token",
								"password"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"token\": \"<string>\"\n}"
				},
				{
					"name": "Server Error",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/token/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"token",
								"password"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/token/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"token",
								"password"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "CreateProvider - Valid request -  Required fields only Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201 - Created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    // Save new ProviderID\r",
							"    pm.collectionVariables.set(\"providerId\", jsonData.id);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string - firstName and lastName\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
							"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", function () {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.credentialingStatus).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/providers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"providers"
					]
				},
				"description": "Creates a new provider that can be used for license lookups.\n"
			},
			"response": [
				{
					"name": "Success",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"enableMonitoring\": \"<boolean>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"firstName\": \"<string>\",\n \"lastName\": \"<string>\",\n \"enableMonitoring\": \"<boolean>\",\n \"id\": \"<uuid>\",\n \"npis\": [\n  {\n   \"number\": \"<integer>\"\n  },\n  {\n   \"number\": \"<integer>\"\n  }\n ],\n \"licenses\": [\n  {\n   \"sourceId\": \"<uuid>\",\n   \"licenseNumber\": \"<string>\",\n   \"profession\": \"<string>\",\n   \"state\": \"<string>\",\n   \"jobStatus\": \"<string>\",\n   \"currentVerificationStatus\": \"<string>\"\n  },\n  {\n   \"sourceId\": \"<uuid>\",\n   \"licenseNumber\": \"<string>\",\n   \"profession\": \"<string>\",\n   \"state\": \"<string>\",\n   \"jobStatus\": \"<string>\",\n   \"currentVerificationStatus\": \"<string>\"\n  }\n ]\n}"
				},
				{
					"name": "Unauthorized",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"enableMonitoring\": \"<boolean>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Server Error",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"enableMonitoring\": \"<boolean>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Bad Request",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"enableMonitoring\": \"<boolean>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Create a new webhook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"baseUrl\") + '/providers/' +  pm.collectionVariables.get(\"providerId\"),\r",
							"    method: 'PATCH',\r",
							"    header:{\r",
							"        'Content-Type': 'application/json',\r",
							"        'Authorization': 'Bearer ' + pm.environment.get(\"token\")\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({ \"credentialingStatus\": \"Data Complete\"})\r",
							"    }\r",
							"    }, function (err, res) {\r",
							"        pm.sendRequest({\r",
							"            url: pm.globals.get(\"ngrok_url\") + '/file',\r",
							"            method: 'GET'\r",
							"            }, function (err, res) {\r",
							"                pm.test(\"Body matches string\", function () {\r",
							"                    console.log('/file content: ' + JSON.stringify(res.json()));\r",
							"                    pm.expect(res.code).to.be.equals(200);\r",
							"                    pm.expect(res.json().id).to.be.equals(pm.collectionVariables.get(\"providerId\"));\r",
							"                    pm.expect(res.json().secret).to.be.equals(\"secret_key\");\r",
							"                });\r",
							"            }\r",
							"        );\r",
							"    }\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"baseUrl\") + '/providers/' +  pm.collectionVariables.get(\"providerId\"),\r",
							"    method: 'PATCH',\r",
							"    header:{\r",
							"        'Content-Type': 'application/json',\r",
							"        'Authorization': 'Bearer ' + pm.environment.get(\"token\")\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({ \"credentialingStatus\": \"Data Collection\"})\r",
							"    }\r",
							"    }, function (err, res) {\r",
							"        if(res.code == 200){\r",
							"            console.log(\"Provider status updated.\")\r",
							"        }\r",
							"    }\r",
							");\r",
							"\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"baseUrl\") + '/webhooks',\r",
							"    method: 'GET',\r",
							"    header:{\r",
							"        'Content-Type': 'application/json',\r",
							"        'Authorization': 'Bearer ' + pm.environment.get(\"token\")\r",
							"    }\r",
							"    }, function (err, res) {\r",
							"        if(res.code == 200){\r",
							"            const jsonData = res.json();\r",
							"\t\t\tconst total = jsonData.count();\r",
							"            for(var i = 0; i < total; i++) {\r",
							"                const webHookId = jsonData[i].id;\r",
							"\r",
							"                pm.sendRequest({\r",
							"                    url: pm.environment.get(\"baseUrl\") + '/webhooks/' +  webHookId,\r",
							"                    method: 'DELETE',\r",
							"                    header:{\r",
							"                        'Content-Type': 'application/json',\r",
							"                        'Authorization': 'Bearer ' + pm.environment.get(\"token\")\r",
							"                    }\r",
							"                });\r",
							"            }\r",
							"        }\r",
							"    }\r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"ProviderStatusChanged\",\r\n    \"url\": \"{{ngrok_url}}\",\r\n    \"allowInsecureUrl\": true,\r\n    \"secret\": \"secret_key\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/webhooks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"webhooks"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}